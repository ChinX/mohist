package newmux

import (
	"bytes"
	"log"
)

const (
	static uint = iota
	dynamic
	elastic
)

type NodeChildren []*Node
func (n NodeChildren) Add(child *Node) NodeChildren {
	index, l := 0, len(n)
	nc := make(NodeChildren, l+1)
	switch l {
	case 0:
		nc[index] = child
		return nc
	case 1:
		if child.Priority >= n[0].Priority {
			nc[0], nc[l] = n[0], child
		} else {
			nc[0], nc[l] = child, n[0]
		}
		return nc
	}

	switch child.Priority {
	case static:
		index = 0
	case elastic:
		index = l
	case dynamic:
		for index = range n {
			if n[index].Priority == child.Priority {
				break
			}
		}
	}
	nc[index] = child
	if index != 0 {
		copy(nc[:index], n[:index])
	}
	if index != l {
		copy(nc[index+1:], n[index:])
	}
	return nc
}


type RootNode struct {
	*Node
	Hash map[string]string
}

type Node struct {
	Pattern  string
	Priority uint
	Method   *string
	Children NodeChildren
}

func NewRootNode() *RootNode {
	return &RootNode{
		Node: NewNode("root", static),
		Hash: make(map[string]string),
	}
}

func NewNode(pattern string, priority uint) *Node {
	return &Node{
		Pattern:  pattern,
		Priority: priority,
		Children: make([]*Node, 0, 10),
	}
}
func (n *RootNode) AddNode(pattern string, handler *string) {
	if handler == nil {
		log.Panicf("Mthod of pattern '%s' mush not nil\n", pattern)
	}
	buffer := &bytes.Buffer{}
	target := n.Node
	length := len(pattern)
	for path, next := "", 0; next < length; {
		path, next = Traverse(pattern, next)
		if path == "" {
			if _, ok := n.Hash["/"]; ok {
				panic("Method of root path mush be only")
			}
			target.Method = handler
			n.Hash["/"] = "/"
			break
		}
		buffer.WriteByte('/')

		priority, ended := static, next == length
		if path[0] == '*' || path[0] == ':' {
			priority = dynamic
			buffer.WriteString("%v")
			if path[0] == '*' {
				if !ended {
					log.Panicf("'*' in pattern '%s' must be endpoint\n", pattern)
				}
				priority = elastic
			}
			path = path[1:]
		} else {
			buffer.WriteString(path)
		}

		if !checkPart(path) {
			log.Panicf("Path '%s' in pattern '%s' not matched regex `^[a-zA-Z](([a-zA-Z0-9_.]*[a-zA-Z0-9]+))*$`\n", path, pattern)
		}

		var nn *Node
		for i := range target.Children {
			if target.Children[i].Priority != priority {
				continue
			}
			if target.Children[i].Pattern == path {
				nn = target.Children[i]
				break
			}
		}

		if nn == nil {
			nn = NewNode(path, priority)
			target.Children = target.Children.Add(nn)
		}

		if ended {
			flag := buffer.String()
			if val, ok := n.Hash[flag]; ok {
				log.Panicf("Pattern '%s' conflicted with '%s'\n", val, pattern)
			}
			nn.Method = handler
			n.Hash[flag] = pattern
			break
		}
		target = nn
	}
}
